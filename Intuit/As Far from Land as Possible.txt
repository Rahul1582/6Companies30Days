class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        
        int r = grid.size();
        
        int c = grid[0].size();
        
        int l=0;
        
        int w = 0;
        
        int dx[4] = {-1,0,1,0};
        
        int dy[4] = {0,-1,0,1};
 
        queue<pair<int,int>> q;
        
        vector<vector<bool>>visited(r,vector<bool>(c,false));
        
        for(int i=0;i<r;i++){
            
            for(int j=0;j<c;j++){
                
                if(grid[i][j]==0){
                    w++;
                }
                
                else{
                    q.push({i,j});
                    visited[i][j] = true;
                    l++;
                }
            }
        }
        
        int maxi = INT_MIN;
        
        if(w==0 || l==0){
            return -1;
        }
        
        else{
            
            int ans=0;
            
            while(!q.empty()){
                
                int size = q.size();
                
                while(size--){
                               
                   auto front = q.front();
                
                   q.pop();
                    
                   for(int i=0;i<4;i++){
                       
                       int newx = front.first + dx[i];
                       
                       int newy = front.second + dy[i];
                       
                       if(newx<0 || newy<0 || newx>=r || newy>=c){
                           continue;
                       }
                       
                       else if(visited[newx][newy]){
                           
                           continue;
                       }
                       
                       else if(grid[newx][newy]==0){
                           q.push({newx,newy});
                           visited[newx][newy] = true;
                       }
                   }
                }
                
                ans++;
                
            }
            
            return ans-1;
        }
        
      
    }
};